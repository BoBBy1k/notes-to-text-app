{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","image","setImage","text","setText","confidence","setConfidence","imgWidth","setImgWidth","imgHeight","setImgHeight","canvasRef","useRef","imageRef","useEffect","currentImage","document","querySelector","currentImageWidth","currentImageHeight","clientWidth","clientHeight","console","log","className","accept","id","type","capture","onChange","event","URL","createObjectURL","target","files","style","marginTop","onClick","canvas","current","ctx","getContext","drawImage","dataUrl","toDataURL","Jimp","read","err","workingWidth","workingHeight","resize","greyscale","invert","brightness","contrast","normalize","getBase64","AUTO","data","Image","onload","src","Tesseract","recognize","logger","m","catch","error","then","result","height","borderRadius","contenteditable","e","value","alt","ref","width","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","getElementById","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60dc247f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport Jimp from 'jimp'\n\nfunction App() {\n  const [image, setImage] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [confidence, setConfidence] = useState(\"\");\n  const [imgWidth, setImgWidth] = useState(0);\n  const [imgHeight, setImgHeight] = useState(0);\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    var currentImage = document.querySelector(\"#currentImage\");\n    var currentImageWidth=0\n    var currentImageHeight=0\n    currentImage.clientWidth === 0 ? currentImageWidth = 640 : currentImageWidth = currentImage.clientWidth;\n    currentImage.clientHeight === 0 ? currentImageHeight = 800 : currentImageHeight = currentImage.clientHeight;\n    setImgWidth(currentImageWidth)\n    setImgHeight(currentImageHeight)\n    console.log(\"Image Width: \" + currentImageWidth + \", Image Height: \" + currentImageHeight);\n  }, [image]);\n\n  const handleChange = (event) => {\n    setImage(URL.createObjectURL(event.target.files[0]))\n  }\n\n  const handleClick = () => {\n    setText(\"Processing...\")\n    setConfidence(\"\")\n    console.log(\"Image Width: \" + imgWidth + \", Image Height: \" + imgHeight);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageRef.current, 0, 0, imgWidth, imgHeight);\n    console.log(canvas)\n    let dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    Jimp.read(dataUrl, function (err, image) {\n      let imgSize=4\n      setImgWidth(imgWidth*imgSize)\n      setImgHeight(imgHeight*imgSize)\n      let workingWidth=imgWidth*imgSize\n      let workingHeight=imgHeight*imgSize\n      // setImgWidth(imgWidth)\n      // setImgHeight(imgHeight)\n      // let workingWidth=imgWidth\n      // let workingHeight=imgHeight\n\n      image\n      .resize(workingWidth, workingHeight)\n        .greyscale()\n        .invert()\n\n        .brightness(-.2)\n        .contrast(+.5)\n        .normalize()\n        // .gaussian(1)\n        .getBase64(Jimp.AUTO, function(err, data) {\n          console.log(data);\n          var image = new Image();\n          image.onload = () => { ctx.drawImage(image, 0, 0, workingWidth, workingHeight) }\n          image.src = data\n          Tesseract.recognize(\n            data,'eng',\n            {\n              logger: m => console.log(m)\n            }\n          )\n          .catch (err => {\n            console.error(err);\n          })\n          .then(result => {\n            console.log(result)\n            setConfidence(result.data.confidence + \"%\")\n            setText(result.data.text);\n          })\n        });\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <input accept='image/*' id='icon-button-file' type='file' capture='environment' onChange={handleChange} style={ {marginTop: 50 }}/>\n      <button onClick={handleClick} style={{height:30, borderRadius: 10}}>Do The Thing!</button>\n        <h3>Confidence Level: {confidence}</h3>\n        <h3>Extracted text (Editable)</h3>\n        <div>\n          <span className=\"editableBox\" contenteditable=\"true\" onChange={ (e)=>{setText(e.target.value)}}>{text}</span>\n        </div>\n        <h3>Uploaded Image</h3>\n        <img\n           src={image} className=\"App-logo\" alt=\"Nothing Uploaded!\" id=\"currentImage\"\n           ref={imageRef}\n           />\n        <h3>Modified Image</h3>\n        <canvas ref={canvasRef} width={imgWidth} height={imgHeight}></canvas>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}